<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Learnnn]]></title>
  <subtitle><![CDATA[Learner Never Narcissism]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://learnnn.github.io/"/>
  <updated>2015-11-23T09:32:04.000Z</updated>
  <id>http://learnnn.github.io/</id>
  
  <author>
    <name><![CDATA[guang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[java回调机制]]></title>
    <link href="http://learnnn.github.io/2015/11/23/java%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://learnnn.github.io/2015/11/23/java回调函数/</id>
    <published>2015-11-23T01:10:12.000Z</published>
    <updated>2015-11-23T09:32:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="复杂的绕口令（回调的概念）">复杂的绕口令（回调的概念）</h2><p>所谓回调:就是A类中调用B类中的某个方法C，然后B类中反过来调用A类中的方法D，D这个方法就叫回调方法。<br>一看到这个绕口令式的概念时心中千只草泥马在奔跑/(ㄒoㄒ)/~~，这真的是什么鬼?太迷惑人了……<br>我自己理解就是<strong>A中有B，B中有A，A调用B的方法，然后B再调用A中方法。</strong>(好像也有点绕+_+)</p>
<h2 id="现实类似情况">现实类似情况</h2><blockquote>
<p>大家都喜欢用打电话的例子，好吧，为了跟上时代，我也用这个例子好了，我这个例子采用异步加回调<br>有一天小王遇到一个很难的问题，问题是“1 + 1 = ?”，就打电话问小李，小李一下子也不知道，就跟小王说，等我办完手上的事情，就去想想答案，小王也不会傻傻的拿着电话去等小李的答案吧，于是小王就对小李说，我还要去逛街，你知道了答案就打我电话告诉我，于是挂了电话，自己办自己的事情，过了一个小时，小李打了小王的电话，告诉他答案是2</p>
</blockquote>
<h2 id="我的理解">我的理解</h2><blockquote>
<p>比较经典的回调方式：<br>Class A实现接口CallBack callback——背景1<br>class A中包含一个class B的引用b ——背景2<br>class B有一个参数为callback的方法f(CallBack callback) ——背景3<br>A的对象a调用B的方法 f(CallBack callback) ——A类调用B类的某个方法 C<br>然后b就可以在f(CallBack callback)方法中调用A的方法 ——B类调用A类的某个方法D  </p>
</blockquote>
<h3 id="A中有B">A中有B</h3><p>A通常先实现CallBack接口。<br>A中要有B，通常通过实例化B，然后再调用B的方法（通常通过B方法传参传入A（A作为CallBack出传入））。<br>如下列代码形式：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">interface</span> <span class="type">CallBack</span>&#123;  </span><br><span class="line">	public <span class="type">void</span> <span class="type">AMethod</span>(<span class="type">String</span> <span class="literal">result</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class A implements <span class="type">CallBack</span> &#123; </span><br><span class="line"></span><br><span class="line">    private B b;   </span><br><span class="line"></span><br><span class="line">    public A(B b)&#123;  </span><br><span class="line">        this.B = b;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    public <span class="type">void</span> askQuestion(final <span class="type">String</span> question)&#123;      </span><br><span class="line">        //调用B的方法（通常运行在非ui线程中，为了简单点省略）</span><br><span class="line">        b.<span class="type">BMethod</span>(A.this, question);     </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    @<span class="type">Override</span>  </span><br><span class="line">    public <span class="type">void</span> <span class="type">AMethod</span>(<span class="type">String</span> <span class="literal">result</span>) &#123;  </span><br><span class="line">        <span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"AMethod---&gt;"</span> + <span class="literal">result</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B中有A">B中有A</h3><p>即是上面通过传参传入的A。<br>代码如下：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class B &#123;   </span><br><span class="line">    public <span class="type">void</span> <span class="type">BMethod</span>(<span class="type">CallBack</span> callBack, <span class="type">String</span> question)&#123;  </span><br><span class="line">        </span><br><span class="line">		长时间的运算...</span><br><span class="line">         </span><br><span class="line">        <span class="type">String</span> <span class="literal">result</span> = <span class="string">"答案是2"</span>; </span><br><span class="line">        //调用A方法</span><br><span class="line">        callBack.<span class="type">AMethod</span>(<span class="literal">result</span>);       </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="认特点来认人（换个思维来思考）">认特点来认人（换个思维来思考）</h2><p>认人通常通过认脸，但遇到双胞胎时，这就使人迷糊了。但是我们可以通过认特点来认出他们。<br>回调可以通过特点来认呢？当然可以。<br>A类实现了一个接口，但是A类没有直接调用这个接口的方法，嘻嘻（自己不用，肯定是给别人用的啦），我开始怀疑是回调了。然后A类中有B类实例，并且调用了它的方法，还传入了A，到这里可以99%肯定用了，最后看看B类中是否调用了A类中的方法，Oh，Bingo！你就是回调了，化成灰都认得出来。。。<br><strong>以上为菜鸟我的一些理解，有错误的地方请指正……</strong></p>
<h2 id="参考">参考</h2><p><a href="http://blog.csdn.net/xiaanming/article/details/8703708" target="_blank" rel="external">一个经典例子让你彻彻底底理解java回调机制</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="复杂的绕口令（回调的概念）">复杂的绕口令（回调的概念）</h2><p>所谓回调:就是A类中调用B类中的某个方法C，然后B类中反过来调用A类中的方法D，D这个方法就叫回调方法。<br>一看到这个绕口令式的概念时心中千只草泥马在奔跑/(ㄒoㄒ)/~~，这真的是什么鬼]]>
    </summary>
    
      <category term="java" scheme="http://learnnn.github.io/tags/java/"/>
    
      <category term="java" scheme="http://learnnn.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Rxjava学习笔记（1）]]></title>
    <link href="http://learnnn.github.io/2015/11/22/rxjava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)/"/>
    <id>http://learnnn.github.io/2015/11/22/rxjava学习笔记(1)/</id>
    <published>2015-11-22T13:05:37.000Z</published>
    <updated>2015-11-23T09:15:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="开始之前">开始之前</h2><p>在正文开始之前的最后，放上 GitHub 链接和引入依赖的 gradle 代码： Github：<br><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a><br><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a><br>引入依赖：<br>compile ‘io.reactivex:rxjava:1.0.14’<br>compile ‘io.reactivex:rxandroid:1.0.1’<br>（版本号是文章发布时的最新稳定版）</p>
<h2 id="Rxjava什么鬼？">Rxjava什么鬼？</h2><blockquote>
<p>a library for composing asynchronous and event-based programs by using observable sequences for the Java VM. </p>
</blockquote>
<p>这是Rxjava在Github<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">主页</a>的一段自白，一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。<br>关键词：<strong>异步</strong>、<strong>事件</strong>、<strong>可观测序列</strong>（暂时觉得是一个事件相对另一个事件发生的时间先后）<br>关于更多的Rxjava的介绍和了解可以直接看抛物线大神的<a href="http://gank.io/post/560e15be2dca930e00da1083#toc_11" target="_blank" rel="external">这篇</a>文章，深入浅出，容易理解。  </p>
<h2 id="Rxjava好在哪">Rxjava好在哪</h2><p>简洁：<strong>随着程序逻辑变得越来越复杂，仍然能保持简洁。</strong>它能把本来要嵌套使用的语句平铺出来，使得代码逻辑看起来比较清晰。<br>异步:Scheduler(调度器)进行线程控制，方便使用异步。<br>Observable:很强大的一个类，看看官方的<a href="http://reactivex.io/RxJava/javadoc/rx/Observable.html" target="_blank" rel="external">Java doc</a>就知道它可以做的东西太多太多……</p>
<h2 id="Rxjava实战">Rxjava实战</h2><p>好记性不如烂笔头，Rxjava用在Android上的示例可以先参照着这位阿三哥的<a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">Sample</a>，他没有用java8，是完全Rxjava写的demo，非常适合Rxjava入门和提升在Android中的实战技巧。</p>
<h2 id="Sample中一些自己的理解">Sample中一些自己的理解</h2><h3 id="Concurrency_using_schedulers">Concurrency using schedulers</h3><p>就是简单的让那些繁重的运算放在非UI线程上的一个demo，没什么好说的。</p>
<h3 id="Accumulate_calls_(buffer)">Accumulate calls (buffer)</h3><p>通过调用”buffer”运算，使得在2s（程序设定的）中得到的clickEvent转换后的值放进List当中，相当于在2s内缓存运算结果，然后在onNext中对其进行其他操作</p>
<h3 id="Instant/Auto_searching_(subject_+_debounce)">Instant/Auto searching (subject + debounce)</h3><p>搜索时，你想搜索”Bruce Lee”，你不希望它像B,Br，Bru，Bruc…这样每变动一下就搜索一下吧。debounce可以过滤掉在一定时间范围内前面产生的事件，只保留最后一个的事件，也可以这样说：它过一定的时间才会搜索一次。</p>
<h3 id="Retrofit_and_RxJava_(zip,_flatmap)">Retrofit and RxJava (zip, flatmap)</h3><p>Retrofit是Square的一个开源网络库，它提供了Rxjava版本的Observable形式API，这个例子中，出现了网络请求中经常发生的情况：网络请求后获得的返回值要作为另外一个网络请求的参数。这种循环嵌套调用的程序，若不是用rxjava来写，则会形成迷之缩进，比较难看清其中的代码逻辑。flatmap把传入参数转化成一个Observable对象。 zip将几个Observable打包成一个Observable。<br>如下图所示，通过flatmap让那些网络请求变成平行的请求，然后通过zip将结果合并成最后的数据输出。</p>
<pre><code><span class="code">         (flatmap)</span>
f1 <span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">____ f3 __</span><span class="strong">_____</span>
<span class="code">         (flatmap)               |    (zip)</span>
f2 <span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">____ f4 __</span><span class="strong">_____</span>| <span class="strong">_____</span><span class="strong">_____</span>_  final output
<span class="code">        \                        |</span>
<span class="code">         \____________ f5 _______|</span>
</code></pre><h3 id="Double_binding_with_TextViews">Double binding with TextViews</h3><p>自动更新界面，通过PublishSubject建立一个”监听器”，当调用它的onNext方法时，它会”监听”到数据，并执行相关操作。可能很方便的就使用了MVP模式。<br>PS:这样说应该没有问题，但实际就比较复杂（自行google或看源代码，我说不清楚）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="开始之前">开始之前</h2><p>在正文开始之前的最后，放上 GitHub 链接和引入依赖的 gradle 代码： Github：<br><a href="https://github.com/ReactiveX/RxJava" target="_blank" ]]>
    </summary>
    
      <category term="Rxjava" scheme="http://learnnn.github.io/tags/Rxjava/"/>
    
      <category term="Rxjava" scheme="http://learnnn.github.io/categories/Rxjava/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo主题]]></title>
    <link href="http://learnnn.github.io/2015/04/28/Hexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://learnnn.github.io/2015/04/28/Hexo主题/</id>
    <published>2015-04-27T16:00:37.000Z</published>
    <updated>2015-04-28T02:57:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="主题的选择">主题的选择</h2><p>在Hexo官网的<a href="http://hexo.io/themes/" target="_blank" rel="external">Themes</a>中，看到Jacman和NexT两款主题比较适合自己，简单，使用，NexT其实也挺不错，自己用手机网页打开两个主题时，发现Jacman比NexT快，最后的最后还是选择了Jacman。</p>
<h2 id="Jacman的安装启用与跟新">Jacman的安装启用与跟新</h2><p><a href="http://wuchong.me/jacman/" target="_blank" rel="external">http://wuchong.me/jacman/</a></p>
<h3 id="安装">安装</h3><p>在博客根目录下执行如下命令。</p>
<p><code>$ git clone https://github.com/wuchong/jacman.git themes/jacman</code></p>
<p>Jacman 需要安装 Hexo 2.7 及以上版本，请先升级您的 Hexo 程序，再启用此主题。</p>
<p>启用</p>
<p>修改你的博客根目录下的_config.yml配置文件中的theme属性，将其设置为jacman。同时建议设置stylus属性中的compress值为true，会自动压缩 CSS 文件，hexo默认配置中不包含这一项，建议开启。如下。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">theme:</span> jacman</span><br><span class="line"><span class="string">stylus:</span></span><br><span class="line"><span class="label">  compress:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>更新<br><code>cd themes/jacman</code><br><code>git pull origin master</code></p>
<p>请先备份您主题目录下的 _config.yml 文件后再升级。</p>
<h2 id="Jacman主题的配置">Jacman主题的配置</h2><p><a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/" target="_blank" rel="external">如何使用 Jacman 主题</a></p>
<h3 id="自己自定义了的部分">自己自定义了的部分</h3><p>1.menu中的英文改成了中文页面</p>
<p>2.在博客根目录下_config.yml中将language改成zh-CN，添加了subtitle</p>
<p>3.建立自我介绍页面（About 页面）</p>
<p>首先在主目录找到_config.yml，找到url添加about_dir: about到这个板块。然后在/source里面建立about文件夹。在about文件夹里建立index.md。编辑index.md就和发布其他的文章一样，格式都一样。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//yoursite.com</span></span><br><span class="line"><span class="string">about_dir:</span> about        ##添加了这一块</span><br><span class="line"><span class="string">root:</span> /</span><br><span class="line"><span class="string">permalink:</span> :year<span class="regexp">/:month/</span>:day<span class="regexp">/:title/</span></span><br><span class="line"><span class="string">permalink_defaults:</span></span><br></pre></td></tr></table></figure>
<p>4.主题颜色更改 Theme Color</p>
<p>更改在主题目录下的_config.yml的 theme_color 下 theme 值。</p>
<p>Theme Color<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme_color</span>:</span><br><span class="line">    <span class="attribute">theme</span>: <span class="string">'#ff9900'</span>    ##改成黄色</span><br></pre></td></tr></table></figure></p>
<p>5.自己制作网页logo和图片（使用photoshop）</p>
<p>6.改了作者名等信息</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="主题的选择">主题的选择</h2><p>在Hexo官网的<a href="http://hexo.io/themes/" target="_blank" rel="external">Themes</a>中，看到Jacman和NexT两款主题比较适合自己，简单，使]]>
    </summary>
    
      <category term="Hexo主题" scheme="http://learnnn.github.io/tags/Hexo%E4%B8%BB%E9%A2%98/"/>
    
      <category term="Hexo" scheme="http://learnnn.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo添加功能与优化]]></title>
    <link href="http://learnnn.github.io/2015/04/28/Hexo%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>http://learnnn.github.io/2015/04/28/Hexo添加功能与优化/</id>
    <published>2015-04-27T16:00:37.000Z</published>
    <updated>2015-04-28T08:46:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="添加网站sitemap">添加网站sitemap</h2><p>hexo-generator-sitemap 用于生成搜索引擎网站地图<br><code>npm install hexo-generator-sitemap --save</code></p>
<h2 id="添加RSS">添加RSS</h2><p><code>$ npm install hexo-generator-feed --save</code><br>You can configure this plugin in _config.yml(hexo init 的根目录).<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">feed</span>:</span><br><span class="line">  <span class="attribute">type</span>: atom</span><br><span class="line">  <span class="attribute">path</span>: atom.xml</span><br><span class="line">  <span class="attribute">limit</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h2 id="站内搜索">站内搜索</h2><h3 id="Jacman中给出的自定义搜索_Search">Jacman中给出的自定义搜索 Search</h3><p><code>baidu_search</code>：如果开启百度站内搜索需要登录 <a href="http://zn.baidu.com/cse/home2/index" target="_blank" rel="external">百度站内搜索</a>，配置好你的站点，并开启站内搜索获取搜索ID，另外<code>site</code>属性可以填默认值，也可以填自己做了CNAME的二级域名，更详细的可以阅读<a href="http://gengbiao.me/hexo/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/" target="_blank" rel="external">这篇博客</a>了解。<br><code>google_cse</code>：如果开启谷歌自定义搜索需要先登录 <a href="https://cse.google.com/cse/" target="_blank" rel="external">Google CSE</a>，配置好你的站点，并获得此自定义搜索的ID。此外你需要在博客目录下的<code>source</code>文件夹中建立<code>search</code>文件夹并包含一个<code>index.md</code>文件。内容为：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: search</span><br><span class="line"><span class="header">title: search</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure></p>
<p><code>tiny_search</code>: 如果要开启<a href="http://tinysou.com/" target="_blank" rel="external">微搜索</a>，需要先注册一个帐号，配置一个Engine，将Engine的Key填入配置文件中的id即可。</p>
<ul>
<li>百度搜索在点进去的<a href="http://gengbiao.me/hexo/hexo%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/" target="_blank" rel="external">那篇博客</a>中去到它的github page中说道会有问题。就放弃用了。</li>
<li>谷歌搜索在国内……你懂的</li>
<li>其实还有一个<a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a>是专门做站内搜索功能的初创企业的代表，2012年毕业于大名鼎鼎的Y Combinator，总部位于旧金山。以后可是试试……</li>
</ul>
<h3 id="微搜索设置">微搜索设置</h3><p>1.<a href="http://tinysou.com/" target="_blank" rel="external">微搜索</a>，注册，配置一个Engine，将Engine的Key填入配置文件中的id。<br>2.进入微搜索控制台，点击刚才创建的Engines进入设置界面，点击爬虫，添加域名，将自己的网站加进去（从浏览器复制网址）</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="添加网站sitemap">添加网站sitemap</h2><p>hexo-generator-sitemap 用于生成搜索引擎网站地图<br><code>npm install hexo-generator-sitemap --save</code></p>
<h]]>
    </summary>
    
      <category term="Hexo" scheme="http://learnnn.github.io/tags/Hexo/"/>
    
      <category term="Hexo添加功能与优化" scheme="http://learnnn.github.io/categories/Hexo%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客的搭建及遇到的问题]]></title>
    <link href="http://learnnn.github.io/2015/04/28/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://learnnn.github.io/2015/04/28/Hexo博客的搭建及遇到的问题/</id>
    <published>2015-04-27T16:00:15.000Z</published>
    <updated>2015-04-28T02:54:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Why_Hexo">Why Hexo</h2><p>　　<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>正如其官网介绍：A fast, simple &amp; powerful blog framework.简单，快捷，强大，它生成静态文件都是用毫秒为单位的。在用Hexo之前用过Wordpress，octopress等建博客，Wordpress插件丰富，可定制性高，可是感觉系统过于庞大，有很多用不着的功能。octopress我也是用在github上建过博客，相对Wordpress来说，较小，较快，可是它生成静态文件的时间实在太长，后来发现了Hexo（妈妈再也不用担心我找不到好用的blog框架了）。由于以前建立过Hexo，但很久没有更新，现在Hexo已经更新到3.0.1版本了,升级遇到很多问题，就直接重建Hexo了。</p>
<h2 id="Hexo的安装（ubuntu12-04_64位）">Hexo的安装（ubuntu12.04　64位）</h2><p>　　Hexo的安装过程参考<a href="http://hexo.io/docs/" target="_blank" rel="external">Hexo docs</a></p>
<h3 id="1、安装Node-js-">1、安装Node.js.</h3><p>The best way to install Node.js is with nvm.</p>
<p>cURL:</p>
<p><code>$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>Wget:</p>
<p><code>$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</code><br>Once nvm is installed, restart the terminal and run the following command to install Node.js.</p>
<p><code>$ nvm install 0.12</code><br>Alternatively, download and run the installer.</p>
<h3 id="2、安装Git">2、安装Git</h3><p><code>sudo apt-get install git-core</code></p>
<h3 id="3、Gihub端设置SSH">3、Gihub端设置SSH</h3><p>按照官网的流程走才是王道啊……刚开始按照别人写的博客做，各种错误，各种坑…….<br><a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">GitHub Help - Generating SSH Keys</a><br><a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="external">GitHub Help - Error Permission denied (publickey)</a></p>
<h3 id="4、安装hexo-deployer-git">4、安装hexo-deployer-git</h3><p><code>$ npm install hexo-deployer-git --save</code></p>
<h3 id="5、设置博客主目录下的_config-yml">5、设置博客主目录下的_config.yml</h3><p>Edit settings.<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="keyword">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  <span class="keyword">message</span>: [<span class="keyword">message</span>]</span><br></pre></td></tr></table></figure></p>
<h2 id="安装Hexo时遇到的问题">安装Hexo时遇到的问题</h2><h3 id="1、关机重新开机时出现hexo:_command_not_found错误">1、关机重新开机时出现hexo: command not found错误</h3><p><a href="http://androidren.com/index.php?qa=263&amp;qa_1=bash-hexo-command-not-found" target="_blank" rel="external">http://androidren.com/index.php?qa=263&amp;qa_1=bash-hexo-command-not-found</a></p>
<p>运行hexo命令时，发现如题这个错误。hexo是在之前安装好的。</p>
<p>后来发现原来是没有指定nodejs所致。所以，使用下面的方法解决：</p>
<p>可以使用下面命令解决：</p>
<p><code>nvm ls</code><br>v0.12.2</p>
<p><code>nvm use 0.12.2</code><br>Now using node v0.12.2</p>
<p><code>nvm alias default 0.12.2</code><br>default -&gt; 0.12.2 (-&gt; 0.12.2)<br>重新开机后发现此错误真的被解决了……</p>
<h3 id="2、Hexo_deploy时的错误">2、Hexo deploy时的错误</h3><p>Hexo deploy时出现nothing to commit (working directory clean)，但是Github端并没有文件上传上去，参考了<a href="https://github.com/hexojs/hexo/issues/67" target="_blank" rel="external">Hexo deploy 发布不成功 #67</a></p>
<blockquote>
<p>我也遇到过类似的情况，原因就是我第一次设置错了，然后即使我正确设置 Repository 再次 Deploy 的时候它也会报错：nothing to commit, working directory clean；error: src refspec master does not match any。所以，当你重新设置 Repo 的时候要把 .deploy/ 文件夹删掉，让 Hexo 再次初始化，否则 Hexo 只是执行 push 操作，所以会一直报错。</p>
</blockquote>
<p>hexo init的博客根目录下没有发现.deploy/目录，但发现了.deploy_git/目录，猜测是版本升级后名字给改了，用<code>rm -rf .deploy_git/</code>,再次<code>hexo deploy</code>后也出现了点问题（可能是那时网络不好），重复这里的删除目录再deploy几次就好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Why_Hexo">Why Hexo</h2><p>　　<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>正如其官网介绍：A fast, simple &amp; powerful b]]>
    </summary>
    
      <category term="Hexo搭建" scheme="http://learnnn.github.io/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Hexo" scheme="http://learnnn.github.io/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://learnnn.github.io/2015/04/25/hello-world/"/>
    <id>http://learnnn.github.io/2015/04/25/hello-world/</id>
    <published>2015-04-24T16:00:15.000Z</published>
    <updated>2015-04-28T05:59:28.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>